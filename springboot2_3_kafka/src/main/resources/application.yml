server:
  port: 8088
spring:
  application:
    name: kafka-test
  kafka:
    #    指定kafka 代理地址，可以多个
#    以逗号分隔的主机：端口对列表，用于建立与Kafka群集的初始连接
    bootstrap-servers: 127.0.0.1:9092
    #    ========= producer ========
    producer:
#      如果该值大于零时，表示启用重试失败的发送次数
      retries: 0
#      每当多个记录被发送到同一分区时，生产者将尝试将记录一起批量处理为更少的请求
#      这有助于提升客户端和服务器上的性能，此配置控制默认批量大小（以字节为单位），默认值为16384
      batch-size: 16384
#      生产者可用于缓冲等待发送到服务器的记录的内存总字节数，默认值为33554432
      buffer-memory: 33554432
#      key的Serializer类
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      值的Serializer类
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      properties:
        linger.ms: 1
      #acks = 0 如果设置为零，则生产者将不会等待来自服务器的任何确认，该记录将立即添加到套接字缓冲区并视为已发送。在这种情况下，
      #               无法保证服务器已收到记录，并且重试配置将不会生效（因为客户端通常不会知道任何故障），为每条记录返回的偏移量始终设置为-1
      #acks = 1 这意味着leader会将记录写入其本地日志，但无需等待所有副本服务器的完全确认即可做出回应，在这种情况下，
      #               如果leader在确认记录后立即失败，但在将数据复制到所有的副本服务器之前，则记录将会丢失。
      #acks = all 这意味着leader将等待完整的同步副本集以确认记录，这保证了只要至少一个同步副本服务器仍然存活，
      #               记录就不会丢失，这是最强有力的保证，这相当于acks = -1的设置。
      acks: 1
#      生产者生成的所有数据的压缩类型，此配置接受标准压缩编解码器（'gzip'，'snappy'，'lz4'），
#      它还接受'uncompressed'以及'producer'，分别表示没有压缩以及保留生产者设置的原始压缩编解码器，
#      默认值为producer
#      compression-type:
    #      ID在发出请求时传递给服务器，用于服务器端日志记录
#      client-id:


    #    ========= consumer =========
    consumer:
      #      指定默认消费者group id
      #      用于标识此使用者所属的使用者组的唯一字符串。
      group-id: user-log-group
      #      确保新的消费者组能获得我们之前发送的消息，为了测试方便（生产配置latest，只获取最新的消息）。
      #      当Kafka中没有初始偏移量或者服务器上不再存在当前偏移量时该怎么办，默认值为latest，表示自动将偏移重置为最新的偏移量
      #      可选的值为latest, earliest, none
      auto-offset-reset: earliest
      #      如果为true，则消费者的偏移量将在后台定期提交，默认值为true
      enable-auto-commit: false
      #      如果'enable.auto.commit'为true，则消费者偏移自动提交给Kafka的频率（以毫秒为单位），默认值为5000。:
      auto-commit-interval: 100ms
      #    指定消息key和消息体的编解码方式
      #      密钥的反序列化器类
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      #      值的反序列化器类
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        session.timeout.ms: 15000
      #      如果没有足够的数据立即满足 fetch.min.bytes 给出的要求，服务器在回答获取请求之前将阻塞的最长时间（以毫秒为单位），默认值为500
      #      fetch-max-wait:
      #      服务器应以字节为单位返回获取请求的最小数据量，默认值为1，对应的kafka的参数为fetch.min.bytes。
      #      fetch-min-size:
      #      心跳与消费者协调员之间的预期时间（以毫秒为单位），默认值为3000
      #      heartbeat-interval:
      #      ID在发出请求时传递给服务器;用于服务器端日志记录
      #      client-id:

#      一次调用poll()操作时返回的最大记录数，默认值为500
#      max-poll-records:

    listener:
      #      监听的topic如果不存在，则不报错
      missing-topics-fatal: false

#      轮询消费者时使用的超时（以毫秒为单位）
#      poll-timeout:


#      在侦听器容器中运行的线程数
#      concurrency:

#      侦听器的AckMode,参见https://docs.spring.io/spring-kafka/reference/htmlsingle/#committing-offsets
#      当enable.auto.commit的值设置为false时，该值会生效；为true时不会生效
#      ack-mode: batch
#      当ackMode为“COUNT”或“COUNT_TIME”时，偏移提交之间的记录数
#      ack-count:
#        当ackMode为“TIME”或“COUNT_TIME”时，偏移提交之间的时间（以毫秒为单位）
#      ack-time:


kafka:
  topic:
    group-id: topicGroupId
    topic-name:
      - topic1
      - topic2
      - topic3

